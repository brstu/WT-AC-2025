/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ—Å—Ç–æ–≤
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—ã —Ñ–∞–Ω–∞—Ç–æ–≤ —Å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –ª–∞–π–∫/—É–¥–∞–ª–∏—Ç—å
 */

const STORAGE_KEY = 'posts-data';

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ—Å—Ç–æ–≤
 */
export function initPosts() {
    const postsContainer = document.getElementById('posts-container');
    if (!postsContainer) return;
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ localStorage
    loadPostsState(postsContainer);
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    postsContainer.addEventListener('click', handlePostAction);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –ø–æ—Å—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 * @param {Event} e - –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
 */
function handlePostAction(e) {
    const target = e.target.closest('[data-action]');
    if (!target) return;
    
    const action = target.getAttribute('data-action');
    const postCard = target.closest('.post-card');
    
    if (!postCard) return;
    
    switch (action) {
        case 'like':
            handleLike(target, postCard);
            break;
        case 'delete':
            handleDelete(postCard);
            break;
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫–∞
 * @param {HTMLElement} button - –ö–Ω–æ–ø–∫–∞ –ª–∞–π–∫–∞
 * @param {HTMLElement} postCard - –≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å—Ç–∞
 */
function handleLike(button, postCard) {
    const isLiked = button.getAttribute('aria-pressed') === 'true';
    const likeCountElement = button.querySelector('.like-count');
    const likeIcon = button.querySelector('.like-icon');
    
    if (!likeCountElement) return;
    
    let count = parseInt(likeCountElement.textContent) || 0;
    
    if (isLiked) {
        // –°–Ω—è—Ç—å –ª–∞–π–∫
        button.setAttribute('aria-pressed', 'false');
        likeIcon.textContent = 'ü§ç';
        count = Math.max(0, count - 1);
    } else {
        // –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫
        button.setAttribute('aria-pressed', 'true');
        likeIcon.textContent = '‚ù§Ô∏è';
        count++;
    }
    
    likeCountElement.textContent = count;
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage
    savePostsState();
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
 * @param {HTMLElement} postCard - –≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å—Ç–∞
 */
function handleDelete(postCard) {
    // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ
    const confirmed = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç?');
    if (!confirmed) return;
    
    // –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
    postCard.classList.add('removing');
    
    // –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        postCard.remove();
        savePostsState();
    }, 300);
}

/**
 * Save posts state to localStorage
 */
function savePostsState() {
    const postsContainer = document.getElementById('posts-container');
    if (!postsContainer) return;
    
    const posts = postsContainer.querySelectorAll('.post-card');
    const state = [];
    
    posts.forEach(post => {
        const postId = post.getAttribute('data-post-id');
        const likeButton = post.querySelector('[data-action="like"]');
        const likeCount = post.querySelector('.like-count');
        
        if (postId) {
            state.push({
                id: postId,
                liked: likeButton?.getAttribute('aria-pressed') === 'true',
                likeCount: parseInt(likeCount?.textContent || '0')
            });
        }
    });
    
    try {
        localStorage.setItem(STORAGE_KEY, JSON.stringify(state));
    } catch (e) {
        console.warn('Failed to save posts state to localStorage', e);
    }
}

/**
 * Load posts state from localStorage
 * @param {HTMLElement} postsContainer - Posts container element
 */
function loadPostsState(postsContainer) {
    try {
        const savedState = localStorage.getItem(STORAGE_KEY);
        if (!savedState) return;
        
        const state = JSON.parse(savedState);
        const stateMap = {};
        
        // –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        state.forEach(item => {
            stateMap[item.id] = item;
        });
        
        // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –ø–æ—Å—Ç—ã
        const posts = postsContainer.querySelectorAll('.post-card');
        const currentPostIds = Array.from(posts).map(p => p.getAttribute('data-post-id'));
        
        // –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã)
        posts.forEach(post => {
            const postId = post.getAttribute('data-post-id');
            if (!stateMap[postId]) {
                post.remove();
            }
        });
        
        // –û–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ—Å—Ç—ã
        state.forEach(savedPost => {
            if (currentPostIds.includes(savedPost.id)) {
                const post = postsContainer.querySelector(`[data-post-id="${savedPost.id}"]`);
                if (post) {
                    const likeButton = post.querySelector('[data-action="like"]');
                    const likeCount = post.querySelector('.like-count');
                    const likeIcon = post.querySelector('.like-icon');
                    
                    if (likeButton) {
                        likeButton.setAttribute('aria-pressed', savedPost.liked ? 'true' : 'false');
                    }
                    
                    if (likeIcon) {
                        likeIcon.textContent = savedPost.liked ? '‚ù§Ô∏è' : 'ü§ç';
                    }
                    
                    if (likeCount) {
                        likeCount.textContent = savedPost.likeCount;
                    }
                }
            }
        });
    } catch (e) {
        console.warn('Failed to load posts state from localStorage', e);
    }
}
