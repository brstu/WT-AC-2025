name: Validate student directory

on:
  pull_request_target:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull request number to validate (required for manual run)'
        required: true

permissions:
  issues: write
  pull-requests: write

jobs:
  check-student-dir:
    # Run on PRs targeting main, or manual runs when a PR number is provided
    if: |
      (github.event_name == 'pull_request_target' && github.event.pull_request.base.ref == 'main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.pr_number != '')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare manual PR event
        id: prepare
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.pr_number != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          echo "Fetching PR #${{ github.event.inputs.pr_number }} to $GITHUB_WORKSPACE/.github/manual_event.json"
          mkdir -p "$GITHUB_WORKSPACE/.github"
          curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.inputs.pr_number }}" > "$GITHUB_WORKSPACE/.github/manual_event.json"
          # write outputs using the recommended GITHUB_OUTPUT file
          echo "event_path=$GITHUB_WORKSPACE/.github/manual_event.json" >> $GITHUB_OUTPUT
          echo "pr_number=${{ github.event.inputs.pr_number }}" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install requests

      - name: Run directory validation
        id: validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_EVENT_PATH: ${{ steps.prepare.outputs.event_path || github.event_path }}
          CHECK_RESULT_PATH: .github/check_result.json
          # Optional whitelist secret; if undefined this will just be empty
          WHITELIST: "${{ secrets.STUDENT_DIR_WHITELIST }}"
        run: |
          python .github/scripts/check_student_directory.py

      - name: "Debug: show validation outcome and exit code"
        if: always()
        id: debug_validation
        run: |
          echo "validate step outcome: ${{ steps.validate.outcome }}"
          if [ -f .github/check_result.json ]; then
            echo 'check_result.json:'
            cat .github/check_result.json
            echo 'exit_code:' $(python -c 'import json,sys; print(json.load(open(".github/check_result.json")).get("exit_code","(none)"))' || echo '(none)')
          else
            echo '.github/check_result.json not found'
          fi

      - name: Comment and label PR based on validation result
        if: ${{ always() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ steps.prepare.outputs.pr_number || github.event.pull_request.number }}
          CHECK_RESULT_PATH: .github/check_result.json
        run: |
          echo 'Checking result and possibly commenting/labeling (script)'
          python .github/scripts/comment_and_label.py || true
